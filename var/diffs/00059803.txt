diff --git a/985c61d65edaed0c288343ca30ef13c71b54e25b b/140e0be5bff8f81aea53eade33b12c8ad5dfd74a
index 985c61d65e..140e0be5bf 100644
--- a/985c61d65edaed0c288343ca30ef13c71b54e25b
+++ b/140e0be5bff8f81aea53eade33b12c8ad5dfd74a
@@ -1,30 +1,30 @@
 /**
  * Create a {@link Slf4jReporter} attached to the Titan Metrics registry.
  * <p>
  * If {@code loggerName} is null, or if it is non-null but
  * {@link LoggerFactory#getLogger(loggerName)} returns null, then Metrics's
  * default Slf4j logger name is used instead.
  *
- * @param reportIntervalInMS
- * milliseconds to wait between writing metrics to the Slf4j
+ * @param reportInterval
+ * time to wait between writing metrics to the Slf4j
  * logger
  * @param loggerName
  * the name of the Slf4j logger that receives metrics
  */
-public synchronized void addSlf4jReporter(long reportIntervalInMS, String loggerName) {
+public synchronized void addSlf4jReporter(Duration reportInterval, String loggerName) {
     if (null != slf4jReporter) {
         log.debug("Metrics Slf4jReporter already active; not creating another");
         return;
     }
     Slf4jReporter.Builder b = Slf4jReporter.forRegistry(getRegistry());
     if (null != loggerName) {
         Logger l = LoggerFactory.getLogger(loggerName);
         if (null != l) {
             b.outputTo(l);
         } else {
             log.error("Logger with name {} could not be obtained", loggerName);
         }
     }
     slf4jReporter = b.build();
-    slf4jReporter.start(reportIntervalInMS, TimeUnit.MILLISECONDS);
+    slf4jReporter.start(reportInterval.getLength(SCHEDULING_TIME_UNIT), SCHEDULING_TIME_UNIT);
 }
\ No newline at end of file