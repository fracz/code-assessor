diff --git a/857edf7daa6aefe6a5f21fdbcb1453164646683a b/dacaf05161786a5025faaa903c792f45bf15ffc0
index 857edf7..dacaf05 100644
--- a/857edf7daa6aefe6a5f21fdbcb1453164646683a
+++ b/dacaf05161786a5025faaa903c792f45bf15ffc0
@@ -1,29 +1,37 @@
+/**
+ * Release the resources associated to an open file.
+ *
+ * Guaranteed to be called once for each open() or create().
+ * @param path the FS path of the file to release
+ * @param fi FileInfo data structure kept by FUSE
+ * @return 0 on success, a negative value on error
+ */
 @Override
 public int release(String path, FuseFileInfo fi) {
     LOG.trace("release({})", path);
     final long fd = fi.fh.get();
     OpenFileEntry oe = null;
-    synchronized (mOpenFilesLock) {
+    synchronized (mOpenFiles) {
         oe = mOpenFiles.remove(fd);
         if (oe == null) {
             LOG.error("Cannot find fd for {} in table", path);
             return -ErrorCodes.EBADFD();
         }
     }
-    if (oe.mIn != null) {
+    if (oe.getIn() != null) {
         try {
-            oe.mIn.close();
+            oe.getIn().close();
         } catch (IOException e) {
             LOG.error("Failed closing {} [in]", path, e);
         }
     }
-    if (oe.mOut != null) {
+    if (oe.getOut() != null) {
         try {
             LOG.trace("Closing file writer for {}", path);
-            oe.mOut.close();
+            oe.getOut().close();
         } catch (IOException e) {
             LOG.error("Failed closing {} [out]", path, e);
         }
     }
     return 0;
 }
\ No newline at end of file
