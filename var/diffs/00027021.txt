diff --git a/be8f59f35702d3f824800cda5c49d6d6effa89b3 b/b26250031b718cfb1165f4fd7a9ff77392922265
index be8f59f357..b26250031b 100644
--- a/be8f59f35702d3f824800cda5c49d6d6effa89b3
+++ b/b26250031b718cfb1165f4fd7a9ff77392922265
@@ -1,21 +1,6 @@
-/**
- * Returns the result of applying this function to {@code input}. This method is <i>generally
- * expected</i>, but not absolutely required, to have the following properties:
- * <p/>
- * <ul>
- * <li>Its execution does not cause any observable side effects.
- * <li>The computation is <i>consistent with equals</i>; that is, {@link Objects#equal
- * Objects.equal}{@code (a, b)} implies that {@code Objects.equal(function.apply(a),
- * function.apply(b))}.
- * </ul>
- *
- * @param input
- * @throws NullPointerException if {@code input} is null and this function does not accept null
- * arguments
- */
 @Override
-public ComplexNDArray apply(ComplexNDArray ndArray) {
+public IComplexNDArray apply(IComplexNDArray ndArray) {
     // ifft(x) = conj(fft(conj(x)) / length(x)
-    ComplexNDArray ret = new VectorFFT(n).apply(ndArray.conj()).conj().divi(n);
+    IComplexNDArray ret = new VectorFFT(n).apply(ndArray.conj()).conj().divi(NDArrays.scalar(n));
     return originalN > 0 ? ComplexNDArrayUtil.truncate(ret, originalN, 0) : ret;
 }
\ No newline at end of file