diff --git a/a1da805cfdcf9ecd0e086ef5a25dfc56222e3feb b/c802f8b1ea6b49d9020c95209db5cedb70324ddb
index a1da805cfd..c802f8b1ea 100644
--- a/a1da805cfdcf9ecd0e086ef5a25dfc56222e3feb
+++ b/c802f8b1ea6b49d9020c95209db5cedb70324ddb
@@ -1,13 +1,12 @@
-// TODO reducer目的是什么, 是为了确定读取resultSet的next走内存还是走streaming吗, 如果是,是否抽象出两个Reducer就够了
-private static void buildReducer(final ResultSetPipelineBuilder builder, final MergeContext mergeContext) throws SQLException {
-    // TODO 判断hasGroupByOrAggregation并获取什么样的OrderByColumns, 能否封装到mergeContext对象里
-    if (mergeContext.hasGroupByOrAggregation()) {
-        builder.joinSortReducer(mergeContext.transformGroupByColumnToOrderByColumn());
-        return;
+private static ResultSet buildReducer(final List<ResultSet> filteredResultSets, final MergeContext mergeContext) throws SQLException {
+    if (mergeContext.hasGroupBy()) {
+        if (mergeContext.groupByKeysEqualsOrderByKeys()) {
+            return join(new StreamingOrderByReducerResultSet(mergeContext.getCurrentOrderByKeys()), filteredResultSets);
+        }
+        return join(new MemoryOrderByReducerResultSet(mergeContext.getCurrentOrderByKeys()), filteredResultSets);
+    } else if (mergeContext.hasOrderBy()) {
+        return join(new StreamingOrderByReducerResultSet(mergeContext.getCurrentOrderByKeys()), filteredResultSets);
+    } else {
+        return join(new IteratorReducerResultSet(), filteredResultSets);
     }
-    if (mergeContext.hasOrderBy()) {
-        builder.joinSortReducer(mergeContext.getOrderByColumns());
-        return;
-    }
-    builder.join(new IteratorReducerResultSet());
 }
\ No newline at end of file