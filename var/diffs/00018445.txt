diff --git a/0ebccb339fee2b72a24dddd05c6037628d60c990 b/870440332ff65065ae246de36f08b88b0e260f04
index 0ebccb339f..870440332f 100644
--- a/0ebccb339fee2b72a24dddd05c6037628d60c990
+++ b/870440332ff65065ae246de36f08b88b0e260f04
@@ -1,23 +1,19 @@
 /**
  * Skips a specified number of contiguous values from the start of a Observable sequence and then returns the remaining values.
  *
  * @param items
  * @param num
  * @return
  *
  * @see http://msdn.microsoft.com/en-us/library/hh229847(v=vs.103).aspx
  */
-public static <T> Observable<T> skip(final Observable<T> items, final int num) {
+public static <T> Func1<Observer<T>, Subscription> skip(final Observable<T> items, final int num) {
     // wrap in a Observable so that if a chain is built up, then asynchronously subscribed to twice we will have 2 instances of Take<T> rather than 1 handing both, which is not thread-safe.
-    return new Observable<T>() {
+    return new Func1<Observer<T>, Subscription>() {

         @Override
-        public Subscription subscribe(Observer<T> actualObserver) {
-            final AtomicObservableSubscription subscription = new AtomicObservableSubscription();
-            // wrap in AtomicObserver so that onNext calls are not interleaved but received
-            // in the order they are called
-            subscription.setActual(new Skip<T>(items, num).subscribe(new AtomicObserver<T>(actualObserver, subscription)));
-            return subscription;
+        public Subscription call(Observer<T> observer) {
+            return new Skip<T>(items, num).call(observer);
         }
     };
 }
\ No newline at end of file