diff --git a/bc65f8b22b5915093b645120dc755f8587752be7 b/46af7eaa773db809b99b78c25a52935a08430b3a
index bc65f8b22b..46af7eaa77 100644
--- a/bc65f8b22b5915093b645120dc755f8587752be7
+++ b/46af7eaa773db809b99b78c25a52935a08430b3a
@@ -1,14 +1,15 @@
 private int findEarTip() {
-    for (int i = 0, n = vertexCount; i < n; i++) if (isEarTip(i))
+    int vertexCount = this.vertexCount;
+    for (int i = 0; i < vertexCount; i++) if (isEarTip(i))
         return i;
     // Desperate mode: if no vertex is an ear tip, we are dealing with a degenerate polygon (e.g. nearly collinear).
     // Note that the input was not necessarily degenerate, but we could have made it so by clipping some valid ears.
     // Idea taken from Martin Held, "FIST: Fast industrial-strength triangulation of polygons", Algorithmica (1998),
     // http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.115.291
     // Return a convex or tangential vertex if one exists.
-    IntArray vertexTypes = this.vertexTypes;
-    for (int i = 0, n = vertexCount; i < n; i++) if (vertexTypes.get(i) != CONCAVE)
+    int[] vertexTypes = this.vertexTypes.items;
+    for (int i = 0; i < vertexCount; i++) if (vertexTypes[i] != CONCAVE)
         return i;
     // If all vertices are concave, just return the first one.
     return 0;
 }
\ No newline at end of file