diff --git a/419715dd2c25ee8d312bbb344c2daa48536220e7 b/0c4a78da161a89b371f3be3d4526542e49f5f1be
index 419715dd2c..0c4a78da16 100644
--- a/419715dd2c25ee8d312bbb344c2daa48536220e7
+++ b/0c4a78da161a89b371f3be3d4526542e49f5f1be
@@ -1,12 +1,12 @@
 public void test_isEmpty() throws Exception {
     String sql = "SELECT * FROM (" + //
     "   SELECT ROW_NUMBER() OVER (ORDER BY FAlertDate Desc, FAlertLevel, FAlertType)  AS RowNumber, *" + //
     "        from monitor_business" + //
     "   where FRemoveAlert = ?" + //
     " ) AS temp_table" + //
     "   WHERE RowNumber BETWEEN ? AND ?";
     SQLServerStatementParser parser = new SQLServerStatementParser(sql);
     SQLStatement stmt = parser.parseStatementList().get(0);
-    Assert.assertEquals("SELECT *" + "\nFROM (SELECT ROW_NUMBER() OVER (ORDER BY FAlertDate DESC, FAlertLevel, FAlertType) AS RowNumber, *" + "\n\tFROM monitor_business" + "\n\tWHERE FRemoveAlert = ?" + "\n\t) temp_table" + "\nWHERE RowNumber BETWEEN ? AND ?", SQLUtils.toSQLServerString(stmt));
-    Assert.assertEquals("select *" + "\nfrom (select row_number() over (order by FAlertDate desc, FAlertLevel, FAlertType) as RowNumber, *" + "\n\tfrom monitor_business" + "\n\twhere FRemoveAlert = ?" + "\n\t) temp_table" + "\nwhere RowNumber between ? and ?", SQLUtils.toSQLServerString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
+    assertEquals("SELECT *\n" + "FROM (\n" + "\tSELECT ROW_NUMBER() OVER (ORDER BY FAlertDate DESC, FAlertLevel, FAlertType) AS RowNumber, *\n" + "\tFROM monitor_business\n" + "\tWHERE FRemoveAlert = ?\n" + ") temp_table\n" + "WHERE RowNumber BETWEEN ? AND ?", SQLUtils.toSQLServerString(stmt));
+    assertEquals("select *\n" + "from (\n" + "\tselect row_number() over (order by FAlertDate desc, FAlertLevel, FAlertType) as RowNumber, *\n" + "\tfrom monitor_business\n" + "\twhere FRemoveAlert = ?\n" + ") temp_table\n" + "where RowNumber between ? and ?", SQLUtils.toSQLServerString(stmt, SQLUtils.DEFAULT_LCASE_FORMAT_OPTION));
 }
\ No newline at end of file