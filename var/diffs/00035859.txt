diff --git a/190e068629dcced9609c91977a10b088dcc83c02 b/d11c74e818dacf9e76214c8e18830e660fb9c398
index 190e068629..d11c74e818 100644
--- a/190e068629dcced9609c91977a10b088dcc83c02
+++ b/d11c74e818dacf9e76214c8e18830e660fb9c398
@@ -1,24 +1,24 @@
 /**
  * If you want to provide your own implementation of {@code MockMaker} this method should:
  * <ul>
  * <li>Create a proxy object that implements {@code typeToMock} and potentially also {@code extraInterfaces}.</li>
  * <li>You may use the information from {@code settings} to configure your proxy object.</li>
  * <li>Your proxy object should carry the {@code hander} with it. For example, if you generate byte code
  * to create the proxy you could generate an extra field to keep the {@code hanlder} with the generated object.
  * Your implementation of {@code MockHandler} is required to provide this instance of {@code handler} when
  * {@link #getHandler(Object)} is called.
  * </li>
  * </ul>
  *
  * @param typeToMock The type of the mock, could be a <strong>class</strong> or an <strong>interface</strong>.
  * @param extraInterfaces Interfaces the mock should implements as well,
  * never <code>null</code>, interfaces only (no classes).
  * @param handler See {@link MockitoInvocationHandler}.
  * <b>Do not</b> provide your own implementation at this time. Make sure your implementation of
  * {@link #getHandler(Object)} will return this instance.
  * @param settings Mock creation settings.
  * @param <T> Type of the mock to return, actually the <code>typeToMock</code>.
  * @return The mock instance.
  * @since 1.9.5
  */
-<T> T createMock(Class<T> typeToMock, Class<?>[] extraInterfaces, MockitoInvocationHandler handler, MockSettingsInfo settings);
\ No newline at end of file
+<T> T createMock(Class<T> typeToMock, Set<Class> extraInterfaces, MockitoInvocationHandler handler, MockSettingsInfo settings);
\ No newline at end of file