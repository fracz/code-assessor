diff --git a/27951001df176a359e2384c83ae1d068af02653e b/4780d8fed86bec4b62ad46d1a702c0cb00b41bcd
index 27951001df..4780d8fed8 100644
--- a/27951001df176a359e2384c83ae1d068af02653e
+++ b/4780d8fed86bec4b62ad46d1a702c0cb00b41bcd
@@ -1,16 +1,17 @@
 /**
- * Solves the problem using OWLQN.  The solution
- * is stored in the {@code lambda} array of {@code prob}.  Note that the
+ * Solves the problem using OWLQN.  The solution is stored in the
+ * <code>lambda</code> array of <code>prob</code>.  Note that the
  * likelihood function will be a penalized L2 likelihood function unless you
  * have turned this off via setting the priorSigmaS to 0.0.
  *
  * @param weight Controls the sparseness/regularization of the L1 solution.
  * The bigger the number the sparser the solution.  Weights between
  * 0.01 and 1.0 typically give good performance.
  */
 public void solveL1(double weight) {
     LikelihoodFunction df = new LikelihoodFunction(prob, tol, useGaussianPrior, priorSigmaS, sigmaSquareds);
     Minimizer<DiffFunction> owl = ReflectionLoading.loadByReflection("edu.stanford.nlp.optimization.OWLQNMinimizer", weight);
-    prob.lambda = owl.minimize(df, tol, new double[df.domainDimension()]);
-    printOptimizationResults(df, null);
+    double[] result = owl.minimize(df, tol, new double[df.domainDimension()]);
+    prob.lambda = result;
+    System.err.println("after optimization value is " + df.valueAt(result));
 }
\ No newline at end of file