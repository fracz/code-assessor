diff --git a/eafe9b665639a4f151d85d02b074d51ee4e0b8ee b/a4283cab1dc3e4f27412b1c80fe82c9867b57b66
index eafe9b6656..a4283cab1d 100644
--- a/eafe9b665639a4f151d85d02b074d51ee4e0b8ee
+++ b/a4283cab1dc3e4f27412b1c80fe82c9867b57b66
@@ -1,13 +1,7 @@
-public boolean isFilterFullyCoveredBy(IDiskAtomFilter filter, ColumnFamily cachedCf, long now) {
-    // We can use the cached value only if we know that no data it doesn't contain could be covered
-    // by the query filter, that is if:
-    // 1) either the whole partition is cached
-    // 2) or we can ensure than any data the filter selects are in the cached partition
-    // When counting rows to decide if the whole row is cached, we should be careful with expiring
-    // columns: if we use a timestamp newer than the one that was used when populating the cache, we might
-    // end up deciding the whole partition is cached when it's really not (just some rows expired since the
-    // cf was cached). This is the reason for Integer.MIN_VALUE below.
-    boolean wholePartitionCached = cachedCf.liveCQL3RowCount(Integer.MIN_VALUE) < metadata.getCaching().rowCache.rowsToCache;
-    // are now expired.
-    return wholePartitionCached || filter.isFullyCoveredBy(cachedCf, now);
+public boolean isFilterFullyCoveredBy(ClusteringIndexFilter filter, DataLimits limits, CachedPartition cached, int nowInSec) {
+    // partition is cached when it's not. This is why we use CachedPartition#cachedLiveRows.
+    if (cached.cachedLiveRows() < metadata.getCaching().rowCache.rowsToCache)
+        return true;
+    // or if we can prove that everything the filter selects is in the cached partition based on its content.
+    return (filter.isHeadFilter() && limits.hasEnoughLiveData(cached, nowInSec)) || filter.isFullyCoveredBy(cached);
 }
\ No newline at end of file