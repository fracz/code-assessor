diff --git a/f623b09d76d1583a081a03edb56cde8eb9d34f7b b/87e8cee6592963a18d584df7f9c699a2cfb69fd3
index f623b09d76..87e8cee659 100644
--- a/f623b09d76d1583a081a03edb56cde8eb9d34f7b
+++ b/87e8cee6592963a18d584df7f9c699a2cfb69fd3
@@ -1,13 +1,13 @@
 @Override
-public UniquenessConstraint uniquePropertyConstraintCreate(KernelStatement state, int labelId, int propertyKey) throws AlreadyConstrainedException, CreateConstraintFailureException, AlreadyIndexedException {
-    Iterator<NodePropertyConstraint> constraints = schemaReadDelegate.constraintsGetForLabelAndPropertyKey(state, labelId, propertyKey);
+public UniquenessConstraint uniquePropertyConstraintCreate(KernelStatement state, NodePropertyDescriptor descriptor) throws AlreadyConstrainedException, CreateConstraintFailureException, AlreadyIndexedException {
+    Iterator<NodePropertyConstraint> constraints = schemaReadDelegate.constraintsGetForLabelAndPropertyKey(state, descriptor);
     while (constraints.hasNext()) {
         PropertyConstraint constraint = constraints.next();
         if (constraint instanceof UniquenessConstraint) {
             throw new AlreadyConstrainedException(constraint, OperationContext.CONSTRAINT_CREATION, new StatementTokenNameLookup(state.readOperations()));
         }
     }
     // It is not allowed to create uniqueness constraints on indexed label/property pairs
-    checkIndexExistence(state, OperationContext.CONSTRAINT_CREATION, labelId, propertyKey);
-    return schemaWriteDelegate.uniquePropertyConstraintCreate(state, labelId, propertyKey);
+    checkIndexExistence(state, OperationContext.CONSTRAINT_CREATION, descriptor);
+    return schemaWriteDelegate.uniquePropertyConstraintCreate(state, descriptor);
 }
\ No newline at end of file