diff --git a/9c5772087e63d934f250ef18079e76bfe911cab0 b/c90e999a17fd36da7c3dbd06676fa0be8d14f84c
index 9c5772087e..c90e999a17 100644
--- a/9c5772087e63d934f250ef18079e76bfe911cab0
+++ b/c90e999a17fd36da7c3dbd06676fa0be8d14f84c
@@ -1,18 +1,17 @@
-public IndexDescriptor createConstraintIndex(final int labelId, final int propertyKeyId) {
+public IndexDescriptor createConstraintIndex(final UniquenessConstraint constraint) {
     try (KernelTransaction transaction = kernelSupplier.get().newTransaction(KernelTransaction.Type.implicit, AUTH_DISABLED);
         Statement statement = transaction.acquireStatement()) {
         // NOTE: This creates the index (obviously) but it DOES NOT grab a schema
         // write lock. It is assumed that the transaction that invoked this "inner" transaction
         // holds a schema write lock, and that it will wait for this inner transaction to do its
         // work.
-        IndexDescriptor descriptor = new IndexDescriptor(labelId, propertyKeyId);
         // TODO (Ben+Jake): The Transactor is really part of the kernel internals, so it needs access to the
         // internal implementation of Statement. However it is currently used by the external
         // RemoveOrphanConstraintIndexesOnStartup job. This needs revisiting.
-        ((KernelStatement) statement).txState().constraintIndexRuleDoAdd(descriptor);
+        ((KernelStatement) statement).txState().constraintIndexRuleDoAdd(constraint.indexDescriptor());
         transaction.success();
-        return descriptor;
+        return constraint.indexDescriptor();
     } catch (TransactionFailureException e) {
         throw new RuntimeException(e);
     }
 }
\ No newline at end of file