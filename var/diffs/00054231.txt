diff --git a/a74f84963e7907ca37e9ab76e47b2b1256c45b58 b/96b8a258294b7106f3bc8a0d0463b89a1a456d9a
index a74f84963e..96b8a25829 100644
--- a/a74f84963e7907ca37e9ab76e47b2b1256c45b58
+++ b/96b8a258294b7106f3bc8a0d0463b89a1a456d9a
@@ -1,9 +1,9 @@
 @Test
 public void parseWithoutParameter() throws SQLException {
     ShardingRule shardingRule = createShardingRule();
     List<Object> parameters = Collections.emptyList();
-    SQLStatementParser statementParser = new SQLStatementParser(DatabaseType.MySQL, shardingRule, parameters, new MySQLParser("DELETE FROM TABLE_XXX xxx WHERE field4<10 AND TABLE_XXX.field1=1 AND field5>10 AND xxx.field2 IN (1,3) AND field6<=10 AND field3 BETWEEN 5 AND 20 AND field7>=10", shardingRule, parameters));
+    SQLParserEngine statementParser = new SQLParserEngine(DatabaseType.MySQL, new MySQLParser("DELETE FROM TABLE_XXX xxx WHERE field4<10 AND TABLE_XXX.field1=1 AND field5>10 AND xxx.field2 IN (1,3) AND field6<=10 AND field3 BETWEEN 5 AND 20 AND field7>=10", shardingRule, parameters), shardingRule, parameters);
     DeleteSQLContext sqlContext = (DeleteSQLContext) statementParser.parseStatement();
     assertDeleteStatement(sqlContext);
     assertThat(sqlContext.toSqlBuilder().toString(), is("DELETE FROM [Token(TABLE_XXX)] xxx WHERE field4<10 AND [Token(TABLE_XXX)].field1=1 AND field5>10 AND xxx.field2 IN (1,3) AND field6<=10 AND field3 BETWEEN 5 AND 20 AND field7>=10"));
 }
\ No newline at end of file