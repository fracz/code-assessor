diff --git a/55b463a50bd4688b5c8e74a26365c8963ff079aa b/af439ca5dc5770d189357d133eacf9203238ad64
index 55b463a50b..af439ca5dc 100644
--- a/55b463a50bd4688b5c8e74a26365c8963ff079aa
+++ b/af439ca5dc5770d189357d133eacf9203238ad64
@@ -1,11 +1,11 @@
 @Override
-public RelationshipPropertyExistenceConstraint relationshipPropertyExistenceConstraintCreate(KernelStatement state, int relTypeId, int propertyKeyId) throws AlreadyConstrainedException, CreateConstraintFailureException {
-    Iterator<RelationshipPropertyConstraint> constraints = schemaReadDelegate.constraintsGetForRelationshipTypeAndPropertyKey(state, relTypeId, propertyKeyId);
+public RelationshipPropertyExistenceConstraint relationshipPropertyExistenceConstraintCreate(KernelStatement state, RelationshipPropertyDescriptor descriptor) throws AlreadyConstrainedException, CreateConstraintFailureException {
+    Iterator<RelationshipPropertyConstraint> constraints = schemaReadDelegate.constraintsGetForRelationshipTypeAndPropertyKey(state, descriptor);
     while (constraints.hasNext()) {
         RelationshipPropertyConstraint constraint = constraints.next();
         if (constraint instanceof RelationshipPropertyExistenceConstraint) {
             throw new AlreadyConstrainedException(constraint, OperationContext.CONSTRAINT_CREATION, new StatementTokenNameLookup(state.readOperations()));
         }
     }
-    return schemaWriteDelegate.relationshipPropertyExistenceConstraintCreate(state, relTypeId, propertyKeyId);
+    return schemaWriteDelegate.relationshipPropertyExistenceConstraintCreate(state, descriptor);
 }
\ No newline at end of file